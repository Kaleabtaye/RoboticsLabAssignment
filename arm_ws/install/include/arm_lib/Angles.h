// Generated by gencpp from file arm_lib/Angles.msg
// DO NOT EDIT!


#ifndef ARM_LIB_MESSAGE_ANGLES_H
#define ARM_LIB_MESSAGE_ANGLES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arm_lib
{
template <class ContainerAllocator>
struct Angles_
{
  typedef Angles_<ContainerAllocator> Type;

  Angles_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , yx(0.0)
    , yy(0.0)
    , yz(0.0)
    , zx(0.0)
    , zy(0.0)
    , zz(0.0)
    , alpha(0.0)
    , beta(0.0)
    , gamma(0.0)
    , translationDist(0.0)  {
    }
  Angles_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , yx(0.0)
    , yy(0.0)
    , yz(0.0)
    , zx(0.0)
    , zy(0.0)
    , zz(0.0)
    , alpha(0.0)
    , beta(0.0)
    , gamma(0.0)
    , translationDist(0.0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _yx_type;
  _yx_type yx;

   typedef float _yy_type;
  _yy_type yy;

   typedef float _yz_type;
  _yz_type yz;

   typedef float _zx_type;
  _zx_type zx;

   typedef float _zy_type;
  _zy_type zy;

   typedef float _zz_type;
  _zz_type zz;

   typedef float _alpha_type;
  _alpha_type alpha;

   typedef float _beta_type;
  _beta_type beta;

   typedef float _gamma_type;
  _gamma_type gamma;

   typedef float _translationDist_type;
  _translationDist_type translationDist;





  typedef boost::shared_ptr< ::arm_lib::Angles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_lib::Angles_<ContainerAllocator> const> ConstPtr;

}; // struct Angles_

typedef ::arm_lib::Angles_<std::allocator<void> > Angles;

typedef boost::shared_ptr< ::arm_lib::Angles > AnglesPtr;
typedef boost::shared_ptr< ::arm_lib::Angles const> AnglesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_lib::Angles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_lib::Angles_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arm_lib::Angles_<ContainerAllocator1> & lhs, const ::arm_lib::Angles_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.yx == rhs.yx &&
    lhs.yy == rhs.yy &&
    lhs.yz == rhs.yz &&
    lhs.zx == rhs.zx &&
    lhs.zy == rhs.zy &&
    lhs.zz == rhs.zz &&
    lhs.alpha == rhs.alpha &&
    lhs.beta == rhs.beta &&
    lhs.gamma == rhs.gamma &&
    lhs.translationDist == rhs.translationDist;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arm_lib::Angles_<ContainerAllocator1> & lhs, const ::arm_lib::Angles_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arm_lib

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arm_lib::Angles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_lib::Angles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_lib::Angles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_lib::Angles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_lib::Angles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_lib::Angles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_lib::Angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "efc6069eeaa1308aece036b76bdc2160";
  }

  static const char* value(const ::arm_lib::Angles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xefc6069eeaa1308aULL;
  static const uint64_t static_value2 = 0xece036b76bdc2160ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_lib::Angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_lib/Angles";
  }

  static const char* value(const ::arm_lib::Angles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_lib::Angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 yx\n"
"float32 yy\n"
"float32 yz\n"
"float32 zx\n"
"float32 zy\n"
"float32 zz\n"
"float32 alpha\n"
"float32 beta\n"
"float32 gamma\n"
"float32 translationDist\n"
;
  }

  static const char* value(const ::arm_lib::Angles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_lib::Angles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.yx);
      stream.next(m.yy);
      stream.next(m.yz);
      stream.next(m.zx);
      stream.next(m.zy);
      stream.next(m.zz);
      stream.next(m.alpha);
      stream.next(m.beta);
      stream.next(m.gamma);
      stream.next(m.translationDist);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Angles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_lib::Angles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_lib::Angles_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "yx: ";
    Printer<float>::stream(s, indent + "  ", v.yx);
    s << indent << "yy: ";
    Printer<float>::stream(s, indent + "  ", v.yy);
    s << indent << "yz: ";
    Printer<float>::stream(s, indent + "  ", v.yz);
    s << indent << "zx: ";
    Printer<float>::stream(s, indent + "  ", v.zx);
    s << indent << "zy: ";
    Printer<float>::stream(s, indent + "  ", v.zy);
    s << indent << "zz: ";
    Printer<float>::stream(s, indent + "  ", v.zz);
    s << indent << "alpha: ";
    Printer<float>::stream(s, indent + "  ", v.alpha);
    s << indent << "beta: ";
    Printer<float>::stream(s, indent + "  ", v.beta);
    s << indent << "gamma: ";
    Printer<float>::stream(s, indent + "  ", v.gamma);
    s << indent << "translationDist: ";
    Printer<float>::stream(s, indent + "  ", v.translationDist);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_LIB_MESSAGE_ANGLES_H
